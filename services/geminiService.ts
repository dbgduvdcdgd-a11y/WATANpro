import { GoogleGenAI, Modality } from "@google/genai";

export const generateImageFromPrompt = async (prompt: string, aspectRatio: string, model: string): Promise<string> => {
  const API_KEY = process.env.API_KEY;

  if (!API_KEY) {
    throw new Error("API_KEY_INVALID: API_KEY environment variable not set.");
  }

  const ai = new GoogleGenAI({ apiKey: API_KEY });

  try {
    if (model === 'imagen-4.0-generate-001') {
      const response = await ai.models.generateImages({
          model: model,
          prompt: prompt,
          config: {
            numberOfImages: 1,
            outputMimeType: 'image/jpeg',
            aspectRatio: aspectRatio,
          },
      });
      
      if (response.generatedImages && response.generatedImages.length > 0) {
        const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
        return `data:image/jpeg;base64,${base64ImageBytes}`;
      } else {
        throw new Error("No images were generated by the API.");
      }
    } else if (model === 'gemini-2.5-flash-image') {
        const response = await ai.models.generateContent({
            model: model,
            contents: {
              parts: [
                {
                  text: prompt,
                },
              ],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });

        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
              const base64ImageBytes: string = part.inlineData.data;
              const mimeType = part.inlineData.mimeType;
              return `data:${mimeType};base64,${base64ImageBytes}`;
            }
        }
        throw new Error("No images were generated by the API.");

    } else {
        throw new Error(`Unsupported model: ${model}`);
    }
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error && error.message.includes("Requested entity was not found.")) {
      throw new Error("API_KEY_INVALID: " + error.message);
    }
    throw new Error("Failed to generate image from Gemini API.");
  }
};